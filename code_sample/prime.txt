    static Vector<Integer> primeV=new Vector<Integer>();
    static int getPrime(int idx){
        if(primeV.size()==0){
            primeV.add(2);
        }
        while(idx>=primeV.size()){
            int p=primeV.lastElement();
            ++p;
            while(true){
                boolean isPrime=true;
                for(int pp:primeV){
                    if(p%pp==0){isPrime=false;break;}
                    if(pp*pp>p){break;}
                }
                if(isPrime)break;
                ++p;
            }
            primeV.add(p);
        }
        return primeV.get(idx);
    }

    static void preparePrime(int max){
        if(primeV.size()==0){
            primeV.add(2);
        }
        int p=3;
        while(p<max){
            boolean isPrime=true;
            for(int pp:primeV){
                if(p%pp==0){isPrime=false;break;}
                if(pp*pp>p){break;}
            }
            if(isPrime){
                primeV.add(p);
            }
            p+=2;
        }
    }

    static int primeNextTest = 3;
    static HashSet<Integer> primeSet = new HashSet<Integer>();
    static LinkedList<Integer> primeList = new LinkedList<Integer>();
    static {primeSet.add(2);primeList.add(2);}
    static boolean isPrime(int v){
        if(v<=1)return false;
        if(primeSet.contains(v))return true;
        for(int p:primeList){
            if(v%p==0)return false;
            if(p*p>v){
                primeSet.add(v);
                return true;
            }
        }
        while(true){
            boolean pntIsPrime = true;
            if(!primeSet.contains(primeNextTest)){
                for(int p:primeList){
                    if(primeNextTest%p==0){
                        pntIsPrime = false;
                        break;
                    }
                    if(p*p>primeNextTest)break;
                }
                if(pntIsPrime){
                    primeSet.add(primeNextTest);
                }
            }
            if(pntIsPrime){
                primeList.add(primeNextTest);
            }
            int pnt=primeNextTest;
            ++primeNextTest;
            if(v%pnt==0)return false;
            if(pnt*pnt>v){
                primeSet.add(v);
                return true;
            }
        }
    }
    